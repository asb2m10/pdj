# pdj.properties
#
# this property file is not 100% java properties aware (like: \\) so
# pay special attention
#
# all parameters from this properties file will be copied to the java
# system properties
# =========================================================================

# by default the pdj.jar (where the pdj.pd_linux is located) will be added 
# to the system classpath
#
# add your jars or directories of jars seperated with a ':' for unix and
# ';' for windows
#
pdj.system-classpath=/home/asb2m10/Documents/workspace/mxdublin/work/mxdublin.jar

# by default from where the pdj.pd_linux is located, every .jar in 
# ${pdj.home}/lib will be added to the pdj classpath
#
# add you jars or directories of jars seperated with a ':' for unix and
# ';' for windows
#
# this is the pdj classpath (dynamic) to set :
pdj.classpath=

# this will print all .jars that are loaded before compiling/loading the 
# user class
pdj.verbose-classloader=true

# the type of compiler to use with the pdj classloader. use only 'javac' 
# or 'jikes'. do not put full path to your compiler
#
# to disable the automatic compilation simply use 
# pdj.compiler=null
#
pdj.compiler=javac

# pdj compiler/classloader directory. by default, ${pdj.home}/classes 
# directory is used if this property is not defined. Before compiling, pdj
# will check if your .java needs to be compiled.
#
# pdj.classes-dir=[your working directory]

# this will redirect the java out/err streams to the pd console. If you need
# to log pdj errors and exceptions to stderr and stdout, set this to false.
#
pdj.redirect-pdio=true

# the jvm to use. If it is not found and the system is on Windows, 
# the jvm installed with the registry will be used. Not used on OS X
#
pdj.JAVA_HOME=/usr/local/java

# the JVM version to use with OS X; linked to the Java Framework on OS X
#
pdj.osx.JVM_JAVA_VERSION=1.5.0

# NOTE: pdj.home is set automagicly from where the pdj.pd_linux or pdj.dll 
# is installed (you need to put it in your pd path in OS X)

# =========================================================================
# VM ARGUMENTS
#
# to monitor memory and thread usage with 1.5 (jconsole) use 
#   -Dcom.sun.management.jmxremote
# to do remote debugging at port 8000
#   -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000
# to check jni calls
#   -Xcheck:jni -verbose:jni
#
# All arguments on the same line just like $ java -X... -X... myclass
#
pdj.vm_args=-Xincgc -Xms32m -Xmx256m 

# tells pdj what type of jvm it must use: client or server. Not used on 
# OS X. client has lower starting time and can take less memory. server
# starts slower and takes more memory, but once the code is executed, 
# it will be faster than in client mode.
#
pdj.vm_type=server

